--#SET TERMINATOR @
SET CURRENT SCHEMA DEMOBANK @

CREATE SCHEMA DEMOBANK @

CREATE TABLE ACCOUNTS (
  ACCOUNT_NUM INTEGER NOT NULL PRIMARY KEY GENERATED ALWAYS AS IDENTITY (START WITH 1),
  FIRST_NAME VARCHAR(32) NOT NULL,
  LAST_NAME VARCHAR(32) NOT NULL,
  BALANCE INTEGER NOT NULL
  )@

CREATE TABLE TRANSACTIONS (
  DATE TIMESTAMP NOT NULL WITH DEFAULT CURRENT TIMESTAMP,
  ACCOUNT_NUM INTEGER,
  TYPE CHAR(1) NOT NULL CHECK (TYPE IN ('W', 'D', 'B', 'C', 'T', 'X')),
  BALANCE_BEFORE INTEGER NOT NULL,
  BALANCE_AFTER INTEGER NOT NULL,
  NOTES VARCHAR(32),
  CONSTRAINT FK_ACCTS FOREIGN KEY (ACCOUNT_NUM) REFERENCES ACCOUNTS (ACCOUNT_NUM) ON DELETE SET NULL
  )@
  
CREATE PROCEDURE CREATE_ACCOUNT (
  IN LN VARCHAR(32),
  IN FN VARCHAR(32))
 BEGIN
  DECLARE ACC INTEGER;
  SELECT ACCOUNT_NUM INTO ACC FROM FINAL TABLE (
    INSERT INTO ACCOUNTS (FIRST_NAME, LAST_NAME, BALANCE)
    VALUES (LN, FN, 0));
  INSERT INTO TRANSACTIONS (ACCOUNT_NUM, TYPE, BALANCE_BEFORE, BALANCE_AFTER)
    VALUES (ACC, 'C', 0, 0);
 END@

CREATE PROCEDURE GET_BALANCE (
  IN ACCOUNT INTEGER,
  OUT BALANCE_OUT INTEGER)
 BEGIN
  SELECT BALANCE INTO BALANCE_OUT
    FROM ACCOUNTS
    WHERE ACCOUNT_NUM = ACCOUNT;
  INSERT INTO TRANSACTIONS (ACCOUNT_NUM, TYPE, BALANCE_BEFORE, BALANCE_AFTER)
    VALUES (ACCOUNT, 'B', BALANCE_OUT, BALANCE_OUT);
 END@

CREATE PROCEDURE DEPOSIT (
  IN ACCOUNT INTEGER,
  IN AMOUNT INTEGER)
 BEGIN
  DECLARE BAL INTEGER;
  DECLARE NEW_BAL INTEGER;
  DECLARE C CURSOR FOR
    SELECT BALANCE
    FROM ACCOUNTS
    WHERE ACCOUNT_NUM = ACCOUNT
    FOR UPDATE;

  OPEN C;
  FETCH C INTO BAL;
  SET NEW_BAL = BAL + AMOUNT;
  BEGIN ATOMIC
   UPDATE ACCOUNTS
     SET BALANCE = NEW_BAL 
     WHERE CURRENT OF C;
   INSERT INTO TRANSACTIONS (ACCOUNT_NUM, TYPE, BALANCE_BEFORE, BALANCE_AFTER)
     VALUES (ACCOUNT, 'D', BAL, NEW_BAL);
  END;
  CLOSE C;
 END@

CREATE PROCEDURE WITHDRAWAL (
  IN ACCOUNT INTEGER,
  IN AMOUNT INTEGER)
 BEGIN
  DECLARE BAL INTEGER;
  DECLARE NEW_BAL INTEGER;
  DECLARE C CURSOR FOR
    SELECT BALANCE
    FROM ACCOUNTS
    WHERE ACCOUNT_NUM = ACCOUNT
    FOR UPDATE;

  OPEN C;
  FETCH C INTO BAL;
  SET NEW_BAL = BAL - AMOUNT;
  IF (NEW_BAL >= 0) THEN
   BEGIN ATOMIC:
    UPDATE ACCOUNTS
      SET BALANCE = NEW_BAL
      WHERE CURRENT OF C;
    INSERT INTO TRANSACTIONS (ACCOUNT_NUM, TYPE, BALANCE_BEFORE, BALANCE_AFTER)
      VALUES (ACCOUNT, 'W', BAL, NEW_BAL);
   END;
  END IF;
  CLOSE C;
 END@

CREATE PROCEDURE TRANSFER (
  IN ACCOUNT_SOURCE INTEGER,
  IN ACCOUNT_TARGET INTEGER,
  IN AMOUNT INTEGER)
 BEGIN
  DECLARE BAL_SOURCE INTEGER;
  DECLARE BAL_TARGET INTEGER;
  DECLARE NEW_BAL_SOURCE INTEGER;
  DECLARE NEW_BAL_TARGET INTEGER;
  DECLARE C_SOURCE CURSOR FOR
    SELECT BALANCE
    FROM ACCOUNTS
    WHERE ACCOUNT_NUM = ACCOUNT_SOURCE
    FOR UPDATE;
  DECLARE C_TARGET CURSOR FOR
    SELECT BALANCE
    FROM ACCOUNTS
    WHERE ACCOUNT_NUM = ACCOUNT_TARGET
    FOR UPDATE;
  
  OPEN C_SOURCE;
  OPEN C_TARGET;
  FETCH C_SOURCE INTO BAL_SOURCE;
  SET NEW_BAL_SOURCE = BAL_SOURCE - AMOUNT;
  IF (NEW_BAL_SOURCE >= 0) THEN
   FETCH C_TARGET INTO BAL_TARGET;
   SET NEW_BAL_TARGET = BAL_TARGET + AMOUNT;
   BEGIN ATOMIC
    UPDATE ACCOUNTS
      SET BALANCE = NEW_BAL_SOURCE
      WHERE CURRENT OF C_SOURCE;
    UPDATE ACCOUNTS
      SET BALANCE = NEW_BAL_TARGET
      WHERE CURRENT OF C_TARGET;
    INSERT INTO TRANSACTIONS (ACCOUNT_NUM, TYPE, BALANCE_BEFORE, BALANCE_AFTER)
      VALUES (ACCOUNT_SOURCE, 'T', BAL_SOURCE, NEW_BAL_SOURCE);
    INSERT INTO TRANSACTIONS (ACCOUNT_NUM, TYPE, BALANCE_BEFORE, BALANCE_AFTER)
      VALUES (ACCOUNT_TARGET, 'T', BAL_TARGET, NEW_BAL_TARGET);
   END;
  END IF;
 END@

CREATE PROCEDURE CLOSE_ACCOUNT (
  IN ACCOUNT INTEGER)
 BEGIN
  DECLARE BALANCE INTEGER;
  DECLARE C CURSOR FOR
    SELECT BALANCE
    FROM ACCOUNTS
    WHERE ACCOUNT_NUM = ACCOUNT;
    
  OPEN C;
  FETCH C INTO BALANCE;
  BEGIN ATOMIC
   INSERT INTO TRANSACTIONS (ACCOUNT_NUM, TYPE, BALANCE_BEFORE, BALANCE_AFTER, NOTES)
      VALUES (ACCOUNT, 'X', BALANCE, 0, 'Account ' || ACCOUNT);
   DELETE FROM ACCOUNTS
     WHERE CURRENT OF C;
  END;
 END@