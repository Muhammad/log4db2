--#SET TERMINATOR ;
SET CURRENT SCHEMA LOGGER_1A;

/**
 * TODO DESCRIPTION
 *
 * Made in COLOMBIA.
 */

-- Schema for logger utility's objects.
CREATE SCHEMA LOGGER_1A;

COMMENT ON SCHEMA LOGGER_1A IS 'Schema for objects of the log4db2 utility';

-- Module for all code for the logger utility.
CREATE OR REPLACE MODULE LOGGER;

COMMENT ON MODULE LOGGER IS 'Objects for the log4db2 utility';

CREATE OR REPLACE PUBLIC ALIAS LOGGER FOR MODULE LOGGER;

-- Module version.
ALTER MODULE LOGGER PUBLISH
  VARIABLE VERSION VARCHAR(32) CONSTANT '2012-10-14 1-Alpha';

-- Constant logInternals
ALTER MODULE LOGGER PUBLISH
  VARIABLE LOG_INTERNALS ANCHOR LOGDATA.CONFIGURATION.KEY CONSTANT 'logInternals';

-- Constant for true.
ALTER MODULE LOGGER PUBLISH
  VARIABLE VAL_TRUE ANCHOR LOGDATA.CONFIGURATION.VALUE CONSTANT 'true';

-- Public functions and procedures.
-- Procedure to retrieve the complete logger name.
ALTER MODULE LOGGER PUBLISH
  FUNCTION GET_LOGGER_NAME (
  IN LOG_ID ANCHOR LOGDATA.CONF_LOGGERS.LOGGER_ID
  ) RETURNS VARCHAR(256);

-- Procedure to write logs.
ALTER MODULE LOGGER PUBLISH
  PROCEDURE LOG (
  IN LOGGER_ID ANCHOR LOGDATA.CONF_LOGGERS.LOGGER_ID,
  IN LEVEL_ID ANCHOR LOGDATA.LEVELS.LEVEL_ID,
  IN MESSAGE ANCHOR LOGDATA.LOGS.MESSAGE
  );

-- Procedure to write logs in debug mode.
ALTER MODULE LOGGER PUBLISH
  PROCEDURE DEBUG (
  IN LOGGER_ID ANCHOR LOGDATA.CONF_LOGGERS.LOGGER_ID,
  IN MESSAGE ANCHOR LOGDATA.LOGS.MESSAGE
  );

-- Procedure to write logs in info mode.
ALTER MODULE LOGGER PUBLISH
  PROCEDURE INFO (
  IN LOGGER_ID ANCHOR LOGDATA.CONF_LOGGERS.LOGGER_ID,
  IN MESSAGE ANCHOR LOGDATA.LOGS.MESSAGE
  );

-- Procedure to write logs in warn mode.
ALTER MODULE LOGGER PUBLISH
  PROCEDURE WARN (
  IN LOGGER_ID ANCHOR LOGDATA.CONF_LOGGERS.LOGGER_ID,
  IN MESSAGE ANCHOR LOGDATA.LOGS.MESSAGE
  );

-- Procedure to write logs in error mode.
ALTER MODULE LOGGER PUBLISH
  PROCEDURE ERROR (
  IN LOGGER_ID ANCHOR LOGDATA.CONF_LOGGERS.LOGGER_ID,
  IN MESSAGE ANCHOR LOGDATA.LOGS.MESSAGE
  );

-- Procedure to write logs in fatal mode.
ALTER MODULE LOGGER PUBLISH
  PROCEDURE FATAL (
  IN LOGGER_ID ANCHOR LOGDATA.CONF_LOGGERS.LOGGER_ID,
  IN MESSAGE ANCHOR LOGDATA.LOGS.MESSAGE
  );

-- Procedure to register the logger.
ALTER MODULE LOGGER PUBLISH
  PROCEDURE GET_LOGGER (
  IN NAME VARCHAR(256),
  OUT LOGGER_ID ANCHOR LOGDATA.CONF_LOGGERS.LOGGER_ID
  );

-- Procedure that show the configuration.
ALTER MODULE LOGGER PUBLISH
  PROCEDURE SHOW_CONF (
  );

-- Procedure that show the content of the cache.
ALTER MODULE LOGGER PUBLISH
  PROCEDURE SHOW_CACHE (
  );

-- Procedure that refresh the configuration
ALTER MODULE LOGGER PUBLISH
  PROCEDURE REFRESH_CONF (
  );

-- Returns the value of a configuration key.
ALTER MODULE LOGGER PUBLISH
  FUNCTION GET_VALUE (
  IN GIVEN_KEY ANCHOR LOGDATA.CONFIGURATION.KEY
  ) RETURNS ANCHOR LOGDATA.CONFIGURATION.VALUE;

-- Deletes a value in the cache.
ALTER MODULE LOGGER PUBLISH
  PROCEDURE DELETE_LOGGER_CACHE (
  IN LOGGER ANCHOR LOGDATA.CONF_LOGGERS.LOGGER_ID
  );

-- Deactivates the cache.
ALTER MODULE LOGGER PUBLISH
  PROCEDURE DEACTIVATE_CACHE (
  );

-- Activates the cache.
ALTER MODULE LOGGER PUBLISH
  PROCEDURE ACTIVATE_CACHE (
  );