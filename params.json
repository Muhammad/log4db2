{"name":"Log4db2","tagline":"A logging framework like log4j for IBM DB2 SQL-PL","body":"# log4db2 #\r\n===========\r\n\r\nLog4db2 is a logging utility for DB2 for LUW that uses SQL instructions with SQL\r\nPL code.\r\n\r\nIts purpose is to provide an easy way to write messages from a SQL routine, with\r\nthe possibility to query these messages directly from the database and view the\r\ngenerated output, allowing to monitor the progression of a process. This utility\r\naims to reduce the time used for developing, testing, debugging and monitoring\r\nSQL routines, by centralizing the messages produced by the code.\r\n\r\nThe idea and architecture of this utility are based on the popular Java logging\r\nutilities, such as Log4j and slf4j/logback.\r\n\r\n * Log4j [http://logging.apache.org/log4j]\r\n * Logback/SLF4J [http://logback.qos.ch/] [http://www.slf4j.org/]\r\n\r\nThe license for the source code is \"BSD 2-Clause license\", and for the\r\ndocumentation is \"FreeBSD Documentation license.\" With these two licences you\r\nare free to use, modify and distribute any part of this utility.\r\n\r\nThese are some useful links:\r\n\r\n * The source code is hosted at:\r\n    https://github.com/angoca/log4db2\r\n * The wiki is at:\r\n    https://github.com/angoca/log4db2/wiki\r\n * The last released version is published at:\r\n    https://sourceforge.net/projects/log4db2/files/\r\n * The issue tracker is at:\r\n    https://github.com/angoca/log4db2/issues\r\n * A blog that explain things about this utility:\r\n    http://angocadb2.blogspot.fr/\r\n\r\n\r\n\r\nAndres Gomez Casanova (@angoca)\r\n\r\n\r\n------------------\r\n## Installation ##\r\n\r\nOne variable needs to the specified in order to run the install and example\r\nscripts.\r\n\r\n * LOG4DB2_PATH\r\n\r\nThis variable is initialized via the 'init' script.\r\n\r\nBefore installing the scripts in a database, a connection to it has to be\r\nestablished. If not, an error will be raised.\r\n\r\n**Windows**:\r\n\r\nFirst, unzip the file log4db2.zip, and then:\r\n\r\n    cd log4db2\r\n    init.bat\r\n    install.bat\r\n\r\n**Linux/UNIX**:\r\n\r\nJust follow these steps:\r\n\r\n    tar -zxvf log4db2.tar.gz\r\n    cd log4db2\r\n    . ./init\r\n    . ./install\r\n\r\nMake sure to put the dot before the command. This will source the values and\r\nuse the current connection.\r\n\r\nAfter the install, all statements should have been successful.\r\n\r\nA more detailed guide to install the utility can be found in the wiki:\r\nhttps://github.com/angoca/log4db2/wiki/Install\r\n\r\nYou can also install the utility from the sources and run the examples an\r\ntest:\r\nhttps://github.com/angoca/log4db2/wiki/Install%20from%20sources\r\n\r\nOnce the utility is installed, you can customize the utility. For more\r\ninformation, please visit this link:\r\nhttps://github.com/angoca/log4db2/wiki/Configuration\r\n\r\n\r\n-----------\r\n## Usage ##\r\n\r\n### 1. Write the code ###\r\n\r\nThis could be the structure of your code.\r\n\r\n    CREATE ... HELLO_WORLD ()\r\n     MODIFIES SQL\r\n     BEGIN\r\n      DECLARE LOGGER_ID SMALLINT;\r\n      ... Your declarations\r\n\r\n      LOGGER.GET_LOGGER('Your.Hierarchy', LOGGER_ID);\r\n      ... Your code\r\n      LOGGER.INFO(LOGGER_ID, 'Your message');\r\n      ... Your code\r\n     END@\r\n\r\n### 2. Invoke the code ###\r\n\r\nYou invoke your code (if it is a stored procedure or a function.)\r\n\r\n    CALL HELLO_WORLD();\r\n    VALUES HELLO_WORLD();\r\n\r\n### 3. Check the results ###\r\n\r\nThis is the easiest way to check the log messages.\r\n\r\n    CALL LOGADMIN.LOGS();\r\n\r\n    db2 \"CALL LOGADMIN.LOGS()\"\r\n\r\nCheck the Usage section for more information about the levels, how to access\r\nthe messages and configure the utility.\r\nhttps://github.com/angoca/log4db2/wiki/Usage\r\n\r\n","google":"29489397","note":"Don't delete this file! It's used internally to help with page regeneration."}