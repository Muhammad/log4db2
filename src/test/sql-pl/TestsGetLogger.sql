--#SET TERMINATOR @

/*
Copyright (c) 2012 - 2013, Andres Gomez Casanova (AngocA)
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/**
 * Tests different names for loggers.
 */

SET CURRENT SCHEMA LOGGER_1A @

!DB2 CONNECT TO LOG4DB2 > NUL @

!ECHO NOTE: Make sure triggers are deleted @

--!DB2 -TF CLEANTRIGGERS.SQL +O @

!%SRC_TEST_SCRIPT_PATH%\cleanTriggers @

!$SRC_TEST_SCRIPT_PATH/cleanTriggers @

CREATE OR REPLACE TRIGGER T1_CONF_CACHE
  AFTER INSERT OR UPDATE ON LOGDATA.CONFIGURATION
  REFERENCING NEW AS N
  FOR EACH ROW
 T_CONF_CACHE: BEGIN
  DECLARE TMP ANCHOR LOGDATA.CONFIGURATION.VALUE;
  CASE N.KEY
   WHEN 'internalCache' THEN
    IF (N.VALUE = 'true') THEN
     CALL LOGGER.ACTIVATE_CACHE();
    ELSE
     CALL LOGGER.DEACTIVATE_CACHE();
    END IF;
   ELSE
    -- NOTHING.
  END CASE;
 END T_CONF_CACHE@
CREATE OR REPLACE TRIGGER T3_EFFECTIVE_INSERT
  BEFORE INSERT ON LOGDATA.CONF_LOGGERS_EFFECTIVE
  REFERENCING NEW AS N
  FOR EACH ROW
  SET N.LOGGER_ID = NEXT VALUE FOR LOGDATA.LOGGER_ID_SEQ @

BEGIN
-- Reserved names for errors.
DECLARE SQLCODE INTEGER DEFAULT 0;
DECLARE SQLSTATE CHAR(5) DEFAULT '0000';

DECLARE STRING VARCHAR(32);
DECLARE EXPECTED_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
DECLARE ACTUAL_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;

-- For any other SQL State.
DECLARE CONTINUE HANDLER FOR SQLWARNING
  INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 4, 'Warning SQLCode ' || SQLCODE || '-SQLState ' || SQLSTATE);
DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
  INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 4, 'Exception SQLCode ' || SQLCODE || '-SQLState ' || SQLSTATE);
DECLARE CONTINUE HANDLER FOR NOT FOUND
  INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 5, 'Not found SQLCode ' || SQLCODE || '-SQLState ' || SQLSTATE);

-- Prepares the environment.
INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 3, 'TestsGetLogger: Preparing environment');
DELETE FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONFIGURATION
  SET VALUE = 'false'
  WHERE KEY = 'internalCache';
UPDATE LOGDATA.CONFIGURATION
  SET VALUE = 'false'
  WHERE KEY = 'logInternals';
CALL LOGGER.REFRESH_CONF();
COMMIT;

-- Test1: empty string.
SET STRING = '';
INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 3, 'Test1: >' || STRING || '<');
SET EXPECTED_ID = 0;
CALL LOGGER.GET_LOGGER(STRING, ACTUAL_ID);
IF (EXPECTED_ID <> ACTUAL_ID) THEN
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'Error in test ' || STRING || ' expected ' || EXPECTED_ID || ' ACTUAL ' || COALESCE(ACTUAL_ID,-1));
END IF;
COMMIT;

-- Test2: a whitespace.
SET STRING = ' ';
INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 3, 'Test2: >' || STRING || '<');
SET EXPECTED_ID = 0;
CALL LOGGER.GET_LOGGER(STRING, ACTUAL_ID);
IF (EXPECTED_ID <> ACTUAL_ID) THEN
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'Error in test ' || STRING || ' expected ' || EXPECTED_ID || ' ACTUAL ' || COALESCE(ACTUAL_ID,-1));
END IF;
COMMIT;

-- Test3: a dot.
SET STRING = '.';
INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 3, 'Test3: >' || STRING || '<');
SET EXPECTED_ID = 0;
CALL LOGGER.GET_LOGGER(STRING, ACTUAL_ID);
IF (EXPECTED_ID <> ACTUAL_ID) THEN
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'Error in test ' || STRING || ' expected ' || EXPECTED_ID || ' ACTUAL ' || COALESCE(ACTUAL_ID,-1));
END IF;
COMMIT;

-- Test4: two dots.
SET STRING = '..';
INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 3, 'Test4: >' || STRING || '<');
SET EXPECTED_ID = 0;
CALL LOGGER.GET_LOGGER(STRING, ACTUAL_ID);
IF (EXPECTED_ID <> ACTUAL_ID) THEN
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'Error in test ' || STRING || ' expected ' || EXPECTED_ID || ' ACTUAL ' || COALESCE(ACTUAL_ID,-1));
END IF;
COMMIT;

-- Test5: a letter.
SET STRING = 'a';
INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 3, 'Test5: >' || STRING || '<');
SET EXPECTED_ID = PREVIOUS VALUE FOR LOGDATA.LOGGER_ID_SEQ + 1;
CALL LOGGER.GET_LOGGER(STRING, ACTUAL_ID);
IF (EXPECTED_ID <> ACTUAL_ID) THEN
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'Error in test ' || STRING || ' expected ' || EXPECTED_ID || ' ACTUAL ' || COALESCE(ACTUAL_ID,-1));
END IF;
COMMIT;

-- Test6: a letter followed by a dot.
SET STRING = 'b.';
INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 3, 'Test6: >' || STRING || '<');
SET EXPECTED_ID = PREVIOUS VALUE FOR LOGDATA.LOGGER_ID_SEQ + 1;
CALL LOGGER.GET_LOGGER(STRING, ACTUAL_ID);
IF (EXPECTED_ID <> ACTUAL_ID) THEN
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'Error in test ' || STRING || ' expected ' || EXPECTED_ID || ' ACTUAL ' || COALESCE(ACTUAL_ID,-1));
END IF;
COMMIT;

-- Test7: two valid levels.
SET STRING = 'c.c';
INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 3, 'Test7: >' || STRING || '<');
SET EXPECTED_ID = PREVIOUS VALUE FOR LOGDATA.LOGGER_ID_SEQ + 2;
CALL LOGGER.GET_LOGGER(STRING, ACTUAL_ID);
IF (EXPECTED_ID <> ACTUAL_ID) THEN
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'Error in test ' || STRING || ' expected ' || EXPECTED_ID || ' ACTUAL ' || COALESCE(ACTUAL_ID,-1));
END IF;
COMMIT;

-- Test8: a dot preceded by a dot.
SET STRING = '.d';
INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 3, 'Test8: >' || STRING || '<');
SET EXPECTED_ID = PREVIOUS VALUE FOR LOGDATA.LOGGER_ID_SEQ + 1;
CALL LOGGER.GET_LOGGER(STRING, ACTUAL_ID);
IF (EXPECTED_ID <> ACTUAL_ID) THEN
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'Error in test ' || STRING || ' expected ' || EXPECTED_ID || ' ACTUAL ' || COALESCE(ACTUAL_ID,-1));
END IF;
COMMIT;

-- Test9: a letter surrrounded by dots.
SET STRING = '.e.';
INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 3, 'Test9: >' || STRING || '<');
SET EXPECTED_ID = PREVIOUS VALUE FOR LOGDATA.LOGGER_ID_SEQ + 1;
CALL LOGGER.GET_LOGGER(STRING, ACTUAL_ID);
IF (EXPECTED_ID <> ACTUAL_ID) THEN
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'Error in test ' || STRING || ' expected ' || EXPECTED_ID || ' ACTUAL ' || COALESCE(ACTUAL_ID,-1));
END IF;
COMMIT;

-- Test10: three valid levels.
SET STRING = 'f.g.h';
INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 3, 'Test10: >' || STRING || '<');
SET EXPECTED_ID = PREVIOUS VALUE FOR LOGDATA.LOGGER_ID_SEQ + 3;
CALL LOGGER.GET_LOGGER(STRING, ACTUAL_ID);
IF (EXPECTED_ID <> ACTUAL_ID) THEN
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'Error in test ' || STRING || ' expected ' || EXPECTED_ID || ' ACTUAL ' || COALESCE(ACTUAL_ID,-1));
END IF;
COMMIT;

-- Test11: three valid levels (multiple letters).
SET STRING = 'ii.jj.kk';
INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 3, 'Test11: >' || STRING || '<');
SET EXPECTED_ID = PREVIOUS VALUE FOR LOGDATA.LOGGER_ID_SEQ + 3;
CALL LOGGER.GET_LOGGER(STRING, ACTUAL_ID);
IF (EXPECTED_ID <> ACTUAL_ID) THEN
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'Error in test ' || STRING || ' expected ' || EXPECTED_ID || ' ACTUAL ' || COALESCE(ACTUAL_ID,-1));
END IF;
COMMIT;

-- Test12: a multi letter level.
SET STRING = 'lll';
INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 3, 'Test12: >' || STRING || '<');
SET EXPECTED_ID = PREVIOUS VALUE FOR LOGDATA.LOGGER_ID_SEQ + 1;
CALL LOGGER.GET_LOGGER(STRING, ACTUAL_ID);
IF (EXPECTED_ID <> ACTUAL_ID) THEN
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'Error in test ' || STRING || ' expected ' || EXPECTED_ID || ' ACTUAL ' || COALESCE(ACTUAL_ID,-1));
END IF;
COMMIT;

-- Test13: two multi letters levels.
SET STRING = 'mm.nn';
INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 3, 'Test13: >' || STRING || '<');
SET EXPECTED_ID = PREVIOUS VALUE FOR LOGDATA.LOGGER_ID_SEQ + 2;
CALL LOGGER.GET_LOGGER(STRING, ACTUAL_ID);
IF (EXPECTED_ID <> ACTUAL_ID) THEN
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'Error in test ' || STRING || ' expected ' || EXPECTED_ID || ' ACTUAL ' || COALESCE(ACTUAL_ID,-1));
END IF;
COMMIT;

-- Test14: three multi letters levels.
SET STRING = '111.222.333';
INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 3, 'Test14: >' || STRING || '<');
SET EXPECTED_ID = PREVIOUS VALUE FOR LOGDATA.LOGGER_ID_SEQ + 3;
CALL LOGGER.GET_LOGGER(STRING, ACTUAL_ID);
IF (EXPECTED_ID <> ACTUAL_ID) THEN
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'Error in test ' || STRING || ' expected ' || EXPECTED_ID || ' ACTUAL ' || COALESCE(ACTUAL_ID,-1));
END IF;
COMMIT;

-- Test15: a letter surrrounded by spaces.
SET STRING = ' p ';
INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 3, 'Test15: >' || STRING || '<');
SET EXPECTED_ID = PREVIOUS VALUE FOR LOGDATA.LOGGER_ID_SEQ + 1;
CALL LOGGER.GET_LOGGER(STRING, ACTUAL_ID);
IF (EXPECTED_ID <> ACTUAL_ID) THEN
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'Error in test ' || STRING || ' expected ' || EXPECTED_ID || ' ACTUAL ' || COALESCE(ACTUAL_ID,-1));
END IF;
COMMIT;

-- Cleans the environment.
INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 3, 'TestsGetLogger: Cleaning environment');
DELETE FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE LOGGER_ID <> 0;
INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 3, 'TestsGetLogger: Finished succesfully');
UPDATE LOGDATA.CONFIGURATION
  SET VALUE = 'true'
  WHERE KEY = 'internalCache';
UPDATE LOGDATA.CONFIGURATION
  SET VALUE = 'false'
  WHERE KEY = 'logInternals';
CALL LOGGER.REFRESH_CONF ();
COMMIT;

END @

!DB2 CONNECT TO LOG4DB2 > NUL @

--!DB2 -TF TRIGGER.SQL +O @

!%SRC_TEST_SCRIPT_PATH%\createTriggers @

!$SRC_TEST_SCRIPT_PATH/createTriggers @