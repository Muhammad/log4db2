--#SET TERMINATOR @

/**
 * Tests for the logger insertions.
 */

SET CURRENT SCHEMA LOGGER_1A @

BEGIN
-- Reserved names for errors.
DECLARE SQLCODE INTEGER DEFAULT 0;
DECLARE SQLSTATE CHAR(5) DEFAULT '0000';

DECLARE LAST_VALUE ANCHOR LOGDATA.CONF_LOGGERS.LOGGER_ID;
DECLARE RAISED_1 BOOLEAN; -- For a controlled error.
DECLARE RAISED_2 BOOLEAN; -- For a controlled error.
DECLARE RAISED_3 BOOLEAN; -- For a controlled error.

DECLARE CONTINUE HANDLER FOR SQLSTATE 'LG001' SET RAISED_1 = TRUE;
DECLARE CONTINUE HANDLER FOR SQLSTATE 'LG002' SET RAISED_2 = TRUE;
DECLARE CONTINUE HANDLER FOR SQLSTATE 'LG003' SET RAISED_3 = TRUE;
-- For any other SQL State.
DECLARE CONTINUE HANDLER FOR SQLWARNING
  INSERT INTO LOGDATA.LOGS (MESSAGE) VALUES ('Warning SQLCode ' || SQLCODE || '-SQLState ' || SQLSTATE);
DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
  INSERT INTO LOGDATA.LOGS (MESSAGE) VALUES ('Exception SQLCode ' || SQLCODE || '-SQLState ' || SQLSTATE);
DECLARE CONTINUE HANDLER FOR NOT FOUND
  INSERT INTO LOGDATA.LOGS (MESSAGE) VALUES ('Not found SQLCode ' || SQLCODE || '-SQLState ' || SQLSTATE);

-- Prepares the environment.
SET RAISED_1 = FALSE;
SET RAISED_2 = FALSE;
SET RAISED_3 = FALSE;
INSERT INTO LOGDATA.LOGS (MESSAGE) VALUES ('TestsConfLogger: Preparing environment');
SELECT LOGGER_ID INTO LAST_VALUE FROM FINAL TABLE (
  INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('MAX', 0, 3));
DELETE FROM LOGDATA.CONF_LOGGERS;
DELETE FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID <> 0;

INSERT INTO LOGDATA.CONF_LOGGERS (LOGGER_ID, NAME, PARENT_ID, LEVEL_ID)
  VALUES (0, 'ROOT', NULL, 3);

-- Test1: Inserts an inexistant logger (Error LG001)
INSERT INTO LOGDATA.LOGS (MESSAGE) VALUES ('Test1: Inserts an inexistant logger (Error LG001)');
INSERT INTO LOGDATA.CONF_LOGGERS (LOGGER_ID, NAME, PARENT_ID, LEVEL_ID)
  VALUES (LAST_VALUE + 1, 'test1', 0, 1);
IF (RAISED_1 = FALSE) THEN
 INSERT INTO LOGDATA.LOGS (MESSAGE) VALUES ('Exception not raised');
END IF;
SET RAISED_1 = FALSE;

-- Test2: Tests that the parent cannot be null (Error LG002)
INSERT INTO LOGDATA.LOGS (MESSAGE) VALUES ('Test2: Tests that the parent cannot be null (Error LG002)');
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('test2', 0, 4);
INSERT INTO LOGDATA.CONF_LOGGERS (LOGGER_ID, NAME, PARENT_ID, LEVEL_ID)
  VALUES (LAST_VALUE + 1, 'test2', NULL, NULL);
IF (RAISED_2 = FALSE) THEN
 INSERT INTO LOGDATA.LOGS (MESSAGE) VALUES ('Exception not raised');
END IF;
SET RAISED_2 = FALSE;

-- Test3: Tests that the given parent should exist (Error LG003)
INSERT INTO LOGDATA.LOGS (MESSAGE) VALUES ('Test3: Tests that the given parent should exist (Error LG003)');
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('test3', 0, 4);
INSERT INTO LOGDATA.CONF_LOGGERS (LOGGER_ID, NAME, PARENT_ID, LEVEL_ID)
  VALUES (LAST_VALUE + 2, 'test3', 3, NULL);
IF (RAISED_3 = FALSE) THEN
 INSERT INTO LOGDATA.LOGS (MESSAGE) VALUES ('Exception not raised');
END IF;
SET RAISED_3 = FALSE;

-- Test4: Tests to insert root logger without parent.
INSERT INTO LOGDATA.LOGS (MESSAGE) VALUES ('Test4: Tests to insert root logger without parent.');
--DELETE FROM LOGGER.CONF_LOGGERS;
INSERT INTO LOGDATA.CONF_LOGGERS (LOGGER_ID, NAME, PARENT_ID, LEVEL_ID)
  VALUES (0, 'ROOT', NULL, NULL);

-- Cleans the environment.
INSERT INTO LOGDATA.LOGS (MESSAGE) VALUES ('TestsConfLogger: Finished succesfully');

END @