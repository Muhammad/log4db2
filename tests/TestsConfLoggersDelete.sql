--#SET TERMINATOR @

/**
 * Tests for the logger insertions.
 */

SET CURRENT SCHEMA LOGGER_1A @

BEGIN
-- Reserved names for errors.
DECLARE SQLCODE INTEGER DEFAULT 0;
DECLARE SQLSTATE CHAR(5) DEFAULT '0000';

DECLARE RAISED_LG0C1 BOOLEAN DEFAULT FALSE; -- For a controlled error.
DECLARE RAISED_LG0C2 BOOLEAN DEFAULT FALSE; -- For a controlled error.
DECLARE RAISED_LG0C3 BOOLEAN DEFAULT FALSE; -- For a controlled error.
DECLARE ACTUAL_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
DECLARE ACTUAL_PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
DECLARE ACTUAL_LEVEL ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;
DECLARE EXPECTED_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
DECLARE EXPECTED_PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
DECLARE EXPECTED_LEVEL ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;
DECLARE TEMP ANCHOR TO LOGDATA.CONF_LOGGERS.LOGGER_ID;

-- Controlled SQL State.
DECLARE CONTINUE HANDLER FOR SQLSTATE 'LG0C1'
  BEGIN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (5, 'SQLState ' || SQLSTATE);
   SET RAISED_LG0C1 = TRUE;
  END;
DECLARE CONTINUE HANDLER FOR SQLSTATE 'LG0C2'
  BEGIN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (5, 'SQLState ' || SQLSTATE);
   SET RAISED_LG0C2 = TRUE;
  END;
DECLARE CONTINUE HANDLER FOR SQLSTATE 'LG0C3'
  BEGIN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (5, 'SQLState ' || SQLSTATE);
   SET RAISED_LG0C3 = TRUE;
  END;

-- For any other SQL State.
DECLARE CONTINUE HANDLER FOR SQLWARNING
  INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (4, 'Warning SQLCode ' || SQLCODE || '-SQLState ' || SQLSTATE);
DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
  INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (4, 'Exception SQLCode ' || SQLCODE || '-SQLState ' || SQLSTATE);
DECLARE CONTINUE HANDLER FOR NOT FOUND
  INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (5, 'Not found SQLCode ' || SQLCODE || '-SQLState ' || SQLSTATE);

-- Prepares the environment.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (4, 'TestsConfLogger: Preparing environment');
DELETE FROM LOGDATA.CONF_LOGGERS;
DELETE FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONFIGURATION
  SET VALUE = 'WARN'
  WHERE KEY = 'defaultRootLevel';
UPDATE LOGDATA.CONFIGURATION
  SET VALUE = 'false'
  WHERE KEY = 'internalCache';
UPDATE LOGDATA.CONFIGURATION
  SET VALUE = 'true'
  WHERE KEY = 'logInternals';
SET TEMP = NEXT VALUE FOR LOGDATA.LOGGER_ID_SEQ;
COMMIT;

-- Test57: Tests to delete ROOT logger with a given level.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (4, 'Test57: Tests to delete ROOT logger with a given level');
SET EXPECTED_LEVEL = NULL;
DELETE FROM LOGDATA.CONF_LOGGERS;
DELETE FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONFIGURATION
  SET VALUE = 'WARN'
  WHERE KEY = 'defaultRootLevel';
UPDATE LOGDATA.CONF_LOGGERS_EFFECTIVE
  SET LEVEL_ID = 3
  WHERE LOGGER_ID = 0;
INSERT INTO LOGDATA.CONF_LOGGERS (LOGGER_ID, NAME, PARENT_ID, LEVEL_ID)
  VALUES (0, 'ROOT', NULL, 5);
DELETE FROM LOGDATA.CONF_LOGGERS;
SELECT LEVEL_ID INTO ACTUAL_LEVEL
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE NAME = 'ROOT';
IF (EXPECTED_LEVEL <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LEVEL_ID ' || EXPECTED_LEVEL || ' - ' || ACTUAL_LEVEL);
END IF;
COMMIT;

-- Test58: Tests to delete ROOT logger with null level.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test58: Tests to delete ROOT logger with null level');
SET EXPECTED_LEVEL = NULL;
DELETE FROM LOGDATA.CONF_LOGGERS;
DELETE FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONFIGURATION
  SET VALUE = 'WARN'
  WHERE KEY = 'defaultRootLevel';
UPDATE LOGDATA.CONF_LOGGERS_EFFECTIVE
  SET LEVEL_ID = 3
  WHERE LOGGER_ID = 0;
INSERT INTO LOGDATA.CONF_LOGGERS (LOGGER_ID, NAME, PARENT_ID, LEVEL_ID)
  VALUES (0, 'ROOT', NULL, NULL);
DELETE FROM LOGDATA.CONF_LOGGERS;
SELECT LEVEL_ID INTO ACTUAL_LEVEL
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE NAME = 'ROOT';
IF (EXPECTED_LEVEL <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LEVEL_ID ' || EXPECTED_LEVEL || ' - ' || ACTUAL_LEVEL);
END IF;
COMMIT;

-- Test59: Tests to delete all logger inserted.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (4, 'Test59: Tests to delete all logger inserted');
SET EXPECTED_LEVEL = NULL;
DELETE FROM LOGDATA.CONF_LOGGERS;
DELETE FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONFIGURATION
  SET VALUE = 'WARN'
  WHERE KEY = 'defaultRootLevel';
UPDATE LOGDATA.CONF_LOGGERS_EFFECTIVE
  SET LEVEL_ID = 3
  WHERE LOGGER_ID = 0;
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('Test59', 0, 3);
INSERT INTO LOGDATA.CONF_LOGGERS (LOGGER_ID, NAME, PARENT_ID, LEVEL_ID)
  VALUES (0, 'ROOT', NULL, 5);
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('Test59', 0, 3);
DELETE FROM LOGDATA.CONF_LOGGERS;
SELECT LEVEL_ID INTO ACTUAL_LEVEL
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE NAME = 'Test59';
IF (EXPECTED_LEVEL <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LEVEL_ID ' || EXPECTED_LEVEL || ' - ' || ACTUAL_LEVEL);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE NAME = 'ROOT';
IF (EXPECTED_LEVEL <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LEVEL_ID ' || EXPECTED_LEVEL || ' - ' || ACTUAL_LEVEL);
END IF;
COMMIT;

-- Test60: Tests to delete all null logger inserted.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (4, 'Test60: Tests to delete all null logger inserted');
SET EXPECTED_LEVEL = NULL;
DELETE FROM LOGDATA.CONF_LOGGERS;
DELETE FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONFIGURATION
  SET VALUE = 'WARN'
  WHERE KEY = 'defaultRootLevel';
UPDATE LOGDATA.CONF_LOGGERS_EFFECTIVE
  SET LEVEL_ID = 3
  WHERE LOGGER_ID = 0;
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('Test60', 0, 3);
INSERT INTO LOGDATA.CONF_LOGGERS (LOGGER_ID, NAME, PARENT_ID, LEVEL_ID)
  VALUES (0, 'ROOT', NULL, 2);
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('Test60', 0, NULL);
DELETE FROM LOGDATA.CONF_LOGGERS;
SELECT LEVEL_ID INTO ACTUAL_LEVEL
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE NAME = 'Test60';
IF (EXPECTED_LEVEL <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LEVEL_ID ' || EXPECTED_LEVEL || ' - ' || ACTUAL_LEVEL);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE NAME = 'ROOT';
IF (EXPECTED_LEVEL <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LEVEL_ID ' || EXPECTED_LEVEL || ' - ' || ACTUAL_LEVEL);
END IF;
COMMIT;

-- Test61: Tests to delete logger inserted.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (4, 'Test61: Tests to delete logger inserted');
SET EXPECTED_LEVEL = NULL;
DELETE FROM LOGDATA.CONF_LOGGERS;
DELETE FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONFIGURATION
  SET VALUE = 'WARN'
  WHERE KEY = 'defaultRootLevel';
UPDATE LOGDATA.CONF_LOGGERS_EFFECTIVE
  SET LEVEL_ID = 3
  WHERE LOGGER_ID = 0;
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('Test61', 0, 3);
INSERT INTO LOGDATA.CONF_LOGGERS (LOGGER_ID, NAME, PARENT_ID, LEVEL_ID)
  VALUES (0, 'ROOT', NULL, 5);
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('Test61', 0, 3);
DELETE FROM LOGDATA.CONF_LOGGERS
  WHERE LOGGER_ID = PREVIOUS VALUE FOR LOGDATA.LOGGER_ID_SEQ;
SELECT LEVEL_ID INTO ACTUAL_LEVEL
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE NAME = 'Test61';
IF (EXPECTED_LEVEL <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LEVEL_ID ' || EXPECTED_LEVEL || ' - ' || ACTUAL_LEVEL);
END IF;
SET EXPECTED_LEVEL = 5;
SELECT LEVEL_ID INTO ACTUAL_LEVEL
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE NAME = 'ROOT';
IF (EXPECTED_LEVEL <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LEVEL_ID ' || EXPECTED_LEVEL || ' - ' || ACTUAL_LEVEL);
END IF;
COMMIT;

-- Test62: Tests to delete null logger inserted.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (4, 'Test62: Tests to delete null logger inserted');
SET EXPECTED_LEVEL = NULL;
DELETE FROM LOGDATA.CONF_LOGGERS;
DELETE FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONFIGURATION
  SET VALUE = 'WARN'
  WHERE KEY = 'defaultRootLevel';
UPDATE LOGDATA.CONF_LOGGERS_EFFECTIVE
  SET LEVEL_ID = 3
  WHERE LOGGER_ID = 0;
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('Test62', 0, 3);
INSERT INTO LOGDATA.CONF_LOGGERS (LOGGER_ID, NAME, PARENT_ID, LEVEL_ID)
  VALUES (0, 'ROOT', NULL, 2);
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('Test62', 0, NULL);
DELETE FROM LOGDATA.CONF_LOGGERS
  WHERE LOGGER_ID = PREVIOUS VALUE FOR LOGDATA.LOGGER_ID_SEQ;
SELECT LEVEL_ID INTO ACTUAL_LEVEL
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE NAME = 'Test62';
IF (EXPECTED_LEVEL <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LEVEL_ID ' || EXPECTED_LEVEL || ' - ' || ACTUAL_LEVEL);
END IF;
SET EXPECTED_LEVEL = 2;
SELECT LEVEL_ID INTO ACTUAL_LEVEL
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE NAME = 'ROOT';
IF (EXPECTED_LEVEL <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LEVEL_ID ' || EXPECTED_LEVEL || ' - ' || ACTUAL_LEVEL);
END IF;
COMMIT;

-- Test63: Tests to delete ROOT logger cascade.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (4, 'Test63: Tests to delete ROOT logger cascade');
SET EXPECTED_LEVEL = 3;
DELETE FROM LOGDATA.CONF_LOGGERS;
DELETE FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONFIGURATION
  SET VALUE = 'WARN'
  WHERE KEY = 'defaultRootLevel';
UPDATE LOGDATA.CONF_LOGGERS_EFFECTIVE
  SET LEVEL_ID = 3
  WHERE LOGGER_ID = 0;
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('Test63', 0, 3);
SELECT LEVEL_ID INTO ACTUAL_LEVEL
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE NAME = 'Test63';
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('Test63a', ACTUAL_LEVEL, 3);
SELECT LEVEL_ID INTO ACTUAL_LEVEL
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE NAME = 'Test63a';
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('Test63b', ACTUAL_LEVEL, 3);
INSERT INTO LOGDATA.CONF_LOGGERS (LOGGER_ID, NAME, PARENT_ID, LEVEL_ID)
  VALUES (0, 'ROOT', NULL, 1);
DELETE FROM LOGDATA.CONF_LOGGERS
  WHERE NAME = 'ROOT';
SELECT LEVEL_ID INTO ACTUAL_LEVEL
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE NAME = 'Test63';
IF (EXPECTED_LEVEL <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LEVEL_ID ' || EXPECTED_LEVEL || ' - ' || ACTUAL_LEVEL);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE NAME = 'Test63a';
IF (EXPECTED_LEVEL <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LEVEL_ID ' || EXPECTED_LEVEL || ' - ' || ACTUAL_LEVEL);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE NAME = 'Test63b';
IF (EXPECTED_LEVEL <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LEVEL_ID ' || EXPECTED_LEVEL || ' - ' || ACTUAL_LEVEL);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE NAME = 'ROOT';
IF (EXPECTED_LEVEL <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LEVEL_ID ' || EXPECTED_LEVEL || ' - ' || ACTUAL_LEVEL);
END IF;
COMMIT;

-- Test64: Tests to delete a logger cascade.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (4, 'Test64: Tests to delete a logger cascade');
SET EXPECTED_LEVEL = 2;
DELETE FROM LOGDATA.CONF_LOGGERS;
DELETE FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONFIGURATION
  SET VALUE = 'WARN'
  WHERE KEY = 'defaultRootLevel';
UPDATE LOGDATA.CONF_LOGGERS_EFFECTIVE
  SET LEVEL_ID = 3
  WHERE LOGGER_ID = 0;
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('Test64', 0, 3);
SELECT LEVEL_ID INTO ACTUAL_LEVEL
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE NAME = 'Test64';
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('Test64a', ACTUAL_LEVEL, 3);
SELECT LEVEL_ID INTO ACTUAL_LEVEL
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE NAME = 'Test64a';
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('Test64b', ACTUAL_LEVEL, 3);
INSERT INTO LOGDATA.CONF_LOGGERS (LOGGER_ID, NAME, PARENT_ID, LEVEL_ID)
  VALUES (0, 'ROOT', NULL, 2);
SELECT LEVEL_ID INTO ACTUAL_LEVEL
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE NAME = 'Test64';
INSERT INTO LOGDATA.CONF_LOGGERS (LOGGER_ID, NAME, PARENT_ID, LEVEL_ID)
  VALUES (1, 'Test64', ACTUAL_LEVEL, 4);
DELETE FROM LOGDATA.CONF_LOGGERS
  WHERE NAME = 'Test64';
SELECT LEVEL_ID INTO ACTUAL_LEVEL
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE NAME = 'Test64';
IF (EXPECTED_LEVEL <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LEVEL_ID ' || EXPECTED_LEVEL || ' - ' || ACTUAL_LEVEL);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE NAME = 'Test64a';
IF (EXPECTED_LEVEL <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LEVEL_ID ' || EXPECTED_LEVEL || ' - ' || ACTUAL_LEVEL);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE NAME = 'Test64b';
IF (EXPECTED_LEVEL <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LEVEL_ID ' || EXPECTED_LEVEL || ' - ' || ACTUAL_LEVEL);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE NAME = 'ROOT';
IF (EXPECTED_LEVEL <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LEVEL_ID ' || EXPECTED_LEVEL || ' - ' || ACTUAL_LEVEL);
END IF;
COMMIT;

-- Cleans the environment.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'TestsConfLogger: Cleaning environment');
UPDATE LOGDATA.CONFIGURATION
  SET VALUE = 'true'
  WHERE KEY = 'internalCache';
UPDATE LOGDATA.CONFIGURATION
  SET VALUE = 'false'
  WHERE KEY = 'logInternals';
DELETE FROM LOGDATA.CONF_LOGGERS;
DELETE FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID <> 0;
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'TestsConfLogger: Finished succesfully');
COMMIT;

END @

SELECT *
  FROM LOGDATA.CONF_LOGGERS
  ORDER BY LOGGER_ID @