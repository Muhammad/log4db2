--#SET TERMINATOR @

/**
 * Tests for the conf loggers effective table.
 */

SET CURRENT SCHEMA LOGGER_1A @

BEGIN
-- Reserved names for errors.
DECLARE SQLCODE INTEGER DEFAULT 0;
DECLARE SQLSTATE CHAR(5) DEFAULT '00000';

DECLARE RAISED_LGAE1 BOOLEAN DEFAULT FALSE; -- Logger without parent.
DECLARE RAISED_LGBE1 BOOLEAN DEFAULT FALSE; -- Logger without parent.
DECLARE RAISED_LG0E2 BOOLEAN DEFAULT FALSE; -- Modifying values.
DECLARE RAISED_LGAE3 BOOLEAN DEFAULT FALSE; -- Modifying level_id.
DECLARE RAISED_LGBE3 BOOLEAN DEFAULT FALSE; -- Modifying level_id.
DECLARE RAISED_LG0E4 BOOLEAN DEFAULT FALSE; -- ROOT logger should always exist.
DECLARE RAISED_LG0E5 BOOLEAN DEFAULT FALSE; -- Just one ROOT.
DECLARE RAISED_407 BOOLEAN DEFAULT FALSE; -- Null value.
DECLARE RAISED_530 BOOLEAN DEFAULT FALSE; -- Foreign key.
DECLARE ACTUAL_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
DECLARE ACTUAL_PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
DECLARE ACTUAL_LEVEL ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;
DECLARE EXPECTED_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
DECLARE EXPECTED_PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
DECLARE EXPECTED_LEVEL ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;

-- Controlled SQL State.
DECLARE CONTINUE HANDLER FOR SQLSTATE 'LGAE1'
  BEGIN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (5, 'SQLState ' || SQLSTATE);
   SET RAISED_LGAE1 = TRUE;
  END;
DECLARE CONTINUE HANDLER FOR SQLSTATE 'LGBE1'
  BEGIN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (5, 'SQLState ' || SQLSTATE);
   SET RAISED_LGBE1 = TRUE;
  END;
DECLARE CONTINUE HANDLER FOR SQLSTATE 'LG0E2'
  BEGIN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (5, 'SQLState ' || SQLSTATE);
   SET RAISED_LG0E2 = TRUE;
  END;
DECLARE CONTINUE HANDLER FOR SQLSTATE 'LGAE3'
  BEGIN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (5, 'SQLState ' || SQLSTATE);
   SET RAISED_LGAE3 = TRUE;
  END;
DECLARE CONTINUE HANDLER FOR SQLSTATE 'LGBE3'
  BEGIN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (5, 'SQLState ' || SQLSTATE);
   SET RAISED_LGBE3 = TRUE;
  END;
DECLARE CONTINUE HANDLER FOR SQLSTATE 'LG0E4'
  BEGIN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (5, 'SQLState ' || SQLSTATE);
   SET RAISED_LG0E4 = TRUE;
  END;
DECLARE CONTINUE HANDLER FOR SQLSTATE 'LG0E5'
  BEGIN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (5, 'SQLState ' || SQLSTATE);
   SET RAISED_LG0E5 = TRUE;
  END;
DECLARE CONTINUE HANDLER FOR SQLSTATE '23503'
  BEGIN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (5, 'SQLState ' || SQLSTATE);
   SET RAISED_530 = TRUE;
  END;
DECLARE CONTINUE HANDLER FOR SQLSTATE '23502'
  BEGIN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (5, 'SQLState ' || SQLSTATE);
   SET RAISED_407 = TRUE;
  END;

-- For any other SQL State.
DECLARE CONTINUE HANDLER FOR SQLWARNING
  INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (4, 'Warning SQLCode ' || SQLCODE || '-SQLState ' || SQLSTATE);
DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
  INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (4, 'Exception SQLCode ' || SQLCODE || '-SQLState ' || SQLSTATE);
DECLARE CONTINUE HANDLER FOR NOT FOUND
  INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (5, 'Not found SQLCode ' || SQLCODE || '-SQLState ' || SQLSTATE);

-- Prepares the environment.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'TestsConfLoggersEffective: Preparing environment');
SET RAISED_LGAE1 = FALSE;
SET RAISED_LGBE1 = FALSE;
SET RAISED_LG0E2 = FALSE;
SET RAISED_LGAE3 = FALSE;
SET RAISED_LGBE3 = FALSE;
SET RAISED_LG0E4 = FALSE;
SET RAISED_LG0E5 = FALSE;
SET RAISED_530 = FALSE;
SET RAISED_407 = FALSE;
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID,NAME, PARENT_ID, LEVEL_ID) VALUES
  (0, 'ROOT', 0, 0); -- For first value
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test0', 0, 0); -- For first value
DELETE FROM LOGDATA.CONF_LOGGERS;
DELETE FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONFIGURATION
  SET VALUE = 'WARN'
  WHERE KEY = 'defaultRootLevel';
UPDATE LOGDATA.CONFIGURATION
  SET VALUE = 'false'
  WHERE KEY = 'internalCache';
UPDATE LOGDATA.CONFIGURATION
  SET VALUE = 'false'
  WHERE KEY = 'logInternals';
UPDATE LOGDATA.CONF_LOGGERS_EFFECTIVE
  SET LEVEL_ID = 3
  WHERE LOGGER_ID = 0;
COMMIT;

-- Test1: Inserts a normal logger.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test1: Inserts a normal logger');
SET EXPECTED_LOGGER = PREVIOUS VALUE FOR LOGDATA.LOGGER_ID_SEQ + 1;
SET EXPECTED_PARENT = 0;
SET EXPECTED_LEVEL = 3; -- Default level
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test1', EXPECTED_PARENT, EXPECTED_LEVEL);
SELECT LOGGER_ID, PARENT_ID, LEVEL_ID INTO ACTUAL_LOGGER, ACTUAL_PARENT, ACTUAL_LEVEL
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE LOGGER_ID = PREVIOUS VALUE FOR LOGDATA.LOGGER_ID_SEQ;
IF (EXPECTED_LOGGER <> ACTUAL_LOGGER) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LOGGER_ID ' || EXPECTED_LOGGER || ' - ' || ACTUAL_LOGGER);
END IF;
IF (EXPECTED_PARENT <> ACTUAL_PARENT) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different PARENT_ID ' || EXPECTED_PARENT || ' - ' || ACTUAL_PARENT);
END IF;
IF (EXPECTED_LEVEL <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LEVEL_ID ' || EXPECTED_LEVEL || ' - ' || ACTUAL_LEVEL);
END IF;
COMMIT;

-- Test2: Inserts a logger with a given id.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test2: Inserts a logger with a given id');
SET EXPECTED_LOGGER = PREVIOUS VALUE FOR LOGDATA.LOGGER_ID_SEQ + 1;
SET EXPECTED_PARENT = 0;
SET EXPECTED_LEVEL = 3; -- Default level
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, NAME, PARENT_ID, LEVEL_ID) 
  VALUES (EXPECTED_LOGGER, 'test2', EXPECTED_PARENT, EXPECTED_LEVEL);
SELECT LOGGER_ID, PARENT_ID, LEVEL_ID INTO ACTUAL_LOGGER, ACTUAL_PARENT, ACTUAL_LEVEL
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE LOGGER_ID = PREVIOUS VALUE FOR LOGDATA.LOGGER_ID_SEQ;
IF (EXPECTED_LOGGER <> ACTUAL_LOGGER) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LOGGER_ID ' || EXPECTED_LOGGER || ' - ' || ACTUAL_LOGGER);
END IF;
IF (EXPECTED_PARENT <> ACTUAL_PARENT) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different PARENT_ID ' || EXPECTED_PARENT || ' - ' || ACTUAL_PARENT);
END IF;
IF (EXPECTED_LEVEL <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LEVEL_ID ' || EXPECTED_LEVEL || ' - ' || ACTUAL_LEVEL);
END IF;
COMMIT;

-- Test3: Inserts a logger with a null id.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test3: Inserts a logger with a null id');
SET EXPECTED_LOGGER = PREVIOUS VALUE FOR LOGDATA.LOGGER_ID_SEQ + 1;
SET EXPECTED_PARENT = 0;
SET EXPECTED_LEVEL = 3; -- Default level
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, NAME, PARENT_ID, LEVEL_ID) 
  VALUES (NULL, 'test3', EXPECTED_PARENT, EXPECTED_LEVEL);
SELECT LOGGER_ID, PARENT_ID, LEVEL_ID INTO ACTUAL_LOGGER, ACTUAL_PARENT, ACTUAL_LEVEL
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE LOGGER_ID = PREVIOUS VALUE FOR LOGDATA.LOGGER_ID_SEQ;
IF (EXPECTED_LOGGER <> ACTUAL_LOGGER) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LOGGER_ID ' || EXPECTED_LOGGER || ' - ' || ACTUAL_LOGGER);
END IF;
IF (EXPECTED_PARENT <> ACTUAL_PARENT) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different PARENT_ID ' || EXPECTED_PARENT || ' - ' || ACTUAL_PARENT);
END IF;
IF (EXPECTED_LEVEL <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LEVEL_ID ' || EXPECTED_LEVEL || ' - ' || ACTUAL_LEVEL);
END IF;
COMMIT;

-- Test4: Inserts a logger with a negative id.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test4: Inserts a logger with a negative id');
SET EXPECTED_LOGGER = PREVIOUS VALUE FOR LOGDATA.LOGGER_ID_SEQ + 1;
SET EXPECTED_PARENT = 0;
SET EXPECTED_LEVEL = 3; -- Default level
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, NAME, PARENT_ID, LEVEL_ID)
  VALUES (-1, 'test4', EXPECTED_PARENT, EXPECTED_LEVEL);
SELECT LOGGER_ID, PARENT_ID, LEVEL_ID INTO ACTUAL_LOGGER, ACTUAL_PARENT, ACTUAL_LEVEL
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE LOGGER_ID = PREVIOUS VALUE FOR LOGDATA.LOGGER_ID_SEQ;
IF (EXPECTED_LOGGER <> ACTUAL_LOGGER) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LOGGER_ID ' || EXPECTED_LOGGER || ' - ' || ACTUAL_LOGGER);
END IF;
IF (EXPECTED_PARENT <> ACTUAL_PARENT) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different PARENT_ID ' || EXPECTED_PARENT || ' - ' || ACTUAL_PARENT);
END IF;
IF (EXPECTED_LEVEL <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LEVEL_ID ' || EXPECTED_LEVEL || ' - ' || ACTUAL_LEVEL);
END IF;
COMMIT;

-- Test5: Inserts a logger with an inexistent parent.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test5: Inserts a logger with an inexistent parent');
SET ACTUAL_PARENT = PREVIOUS VALUE FOR LOGDATA.LOGGER_ID_SEQ + 5;
SET ACTUAL_LEVEL = 3; -- Default level
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test5', ACTUAL_PARENT, ACTUAL_LEVEL);
IF (RAISED_530 = FALSE) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Exception not raised');
ELSE
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (5, 'Exception raised 23503');
END IF;
SET RAISED_530 = FALSE;
COMMIT;

-- Test6: Inserts a logger with an null parent.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test6: Inserts a logger with an null parent');
SET ACTUAL_PARENT = NULL;
SET ACTUAL_LEVEL = 3; -- Default level
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test6', ACTUAL_PARENT, ACTUAL_LEVEL);
IF (RAISED_LGAE1 = FALSE) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Exception not raised');
ELSE
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (5, 'Exception raised LG0E1');
END IF;
SET RAISED_LGAE1 = FALSE;
COMMIT;

-- Test7: Inserts a logger with an null parent.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test7: Inserts a logger with an null parent giving an id');
SET ACTUAL_LOGGER = 1;
SET ACTUAL_PARENT = NULL;
SET ACTUAL_LEVEL = 3; -- Default level
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, NAME, PARENT_ID, LEVEL_ID) VALUES
  (ACTUAL_LOGGER, 'test7', ACTUAL_PARENT, ACTUAL_LEVEL);
IF (RAISED_LGAE1 = FALSE) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Exception not raised');
ELSE
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (5, 'Exception raised LG0E1');
END IF;
SET RAISED_LGAE1 = FALSE;
COMMIT;

-- Test8: Inserts a logger with an null level.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test8: Inserts a logger with an null level');
SET EXPECTED_LOGGER = PREVIOUS VALUE FOR LOGDATA.LOGGER_ID_SEQ + 1;
SET EXPECTED_PARENT = 0;
SET EXPECTED_LEVEL = 3; -- Default level
SET ACTUAL_LEVEL = NULL;
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test8', EXPECTED_PARENT, ACTUAL_LEVEL);
SELECT LOGGER_ID, PARENT_ID, LEVEL_ID INTO ACTUAL_LOGGER, ACTUAL_PARENT, ACTUAL_LEVEL
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE LOGGER_ID = PREVIOUS VALUE FOR LOGDATA.LOGGER_ID_SEQ;
IF (EXPECTED_LOGGER <> ACTUAL_LOGGER) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LOGGER_ID ' || EXPECTED_LOGGER || ' - ' || ACTUAL_LOGGER);
END IF;
IF (EXPECTED_PARENT <> ACTUAL_PARENT) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different PARENT_ID ' || EXPECTED_PARENT || ' - ' || ACTUAL_PARENT);
END IF;
IF (EXPECTED_LEVEL <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LEVEL_ID ' || EXPECTED_LEVEL || ' - ' || ACTUAL_LEVEL);
END IF;
COMMIT;

-- Test9: Inserts a logger with an inexistent level.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test9: Inserts a logger with an inexistent level');
SET EXPECTED_LOGGER = PREVIOUS VALUE FOR LOGDATA.LOGGER_ID_SEQ + 1;
SET EXPECTED_PARENT = 0;
SET EXPECTED_LEVEL = 3; -- Default level
SET ACTUAL_PARENT = 0;
SET ACTUAL_LEVEL = 10;
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test9', ACTUAL_PARENT, ACTUAL_LEVEL);
SELECT LOGGER_ID, PARENT_ID, LEVEL_ID INTO ACTUAL_LOGGER, ACTUAL_PARENT, ACTUAL_LEVEL
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE LOGGER_ID = PREVIOUS VALUE FOR LOGDATA.LOGGER_ID_SEQ;
IF (EXPECTED_LOGGER <> ACTUAL_LOGGER) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LOGGER_ID ' || EXPECTED_LOGGER || ' - ' || ACTUAL_LOGGER);
END IF;
IF (EXPECTED_PARENT <> ACTUAL_PARENT) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different PARENT_ID ' || EXPECTED_PARENT || ' - ' || ACTUAL_PARENT);
END IF;
IF (EXPECTED_LEVEL <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LEVEL_ID ' || EXPECTED_LEVEL || ' - ' || ACTUAL_LEVEL);
END IF;
COMMIT;

-- Test10: Inserts a logger with an already existent value.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test10: Inserts a logger with an already existent value');
SET EXPECTED_LOGGER = PREVIOUS VALUE FOR LOGDATA.LOGGER_ID_SEQ + 8;
SET EXPECTED_PARENT = 0;
SET EXPECTED_LEVEL = 3; -- Default level
SET ACTUAL_PARENT = 0;
SET ACTUAL_LEVEL = 10;
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, NAME, PARENT_ID, LEVEL_ID) VALUES
  (EXPECTED_LOGGER, 'test10a', ACTUAL_PARENT, ACTUAL_LEVEL);
SELECT LOGGER_ID INTO ACTUAL_LOGGER
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE LOGGER_ID = PREVIOUS VALUE FOR LOGDATA.LOGGER_ID_SEQ;
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, NAME, PARENT_ID, LEVEL_ID) VALUES
  (EXPECTED_LOGGER, 'test10b', ACTUAL_PARENT, ACTUAL_LEVEL);
SELECT LOGGER_ID INTO EXPECTED_LOGGER
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE LOGGER_ID = PREVIOUS VALUE FOR LOGDATA.LOGGER_ID_SEQ;
IF (EXPECTED_LOGGER <> ACTUAL_LOGGER + 1) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LOGGER_ID ' || EXPECTED_LOGGER || ' - ' || ACTUAL_LOGGER);
END IF;
COMMIT;

-- Test11: Inserts a null message.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test11: Inserts a null message');
SET EXPECTED_PARENT = 0;
SET EXPECTED_LEVEL = 3; -- Default level
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (NAME, PARENT_ID, LEVEL_ID) VALUES
  (NULL, EXPECTED_PARENT, EXPECTED_LEVEL);
IF (RAISED_407 = FALSE) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Exception not raised');
ELSE
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (5, 'Exception raised 23502');
END IF;
SET RAISED_407 = FALSE;
COMMIT;

-- Test12: Inserts twice the same.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test12: Inserts twice the same');
SET EXPECTED_PARENT = 0;
SET EXPECTED_LEVEL = 3; -- Default level
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test12', EXPECTED_PARENT, EXPECTED_LEVEL);
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test12', EXPECTED_PARENT, EXPECTED_LEVEL);
IF (RAISED_LG0E5 = FALSE) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Exception not raised');
ELSE
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (5, 'Exception raised LG0E5');
END IF;
SET RAISED_LG0E5 = FALSE;
COMMIT;

-- Test13: Inserts twice the same different level.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test13: Inserts twice the same different level');
SET EXPECTED_PARENT = 0;
SET EXPECTED_LEVEL = 3; -- Default level
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test13', EXPECTED_PARENT, EXPECTED_LEVEL);
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test13', EXPECTED_PARENT, EXPECTED_LEVEL + 1);
IF (RAISED_LG0E5 = FALSE) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Exception not raised');
ELSE
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (5, 'Exception raised LG0E5');
END IF;
SET RAISED_LG0E5 = FALSE;
COMMIT;

-- Test14: Inserts a logger with an inexistent negative level.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test14: Inserts a logger with an inexistent negative level');
SET EXPECTED_LOGGER = PREVIOUS VALUE FOR LOGDATA.LOGGER_ID_SEQ + 1;
SET EXPECTED_PARENT = 0;
SET EXPECTED_LEVEL = 3; -- Default level
SET ACTUAL_PARENT = 0;
SET ACTUAL_LEVEL = -1;
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test14', ACTUAL_PARENT, ACTUAL_LEVEL);
SELECT LOGGER_ID, PARENT_ID, LEVEL_ID INTO ACTUAL_LOGGER, ACTUAL_PARENT, ACTUAL_LEVEL
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE LOGGER_ID = PREVIOUS VALUE FOR LOGDATA.LOGGER_ID_SEQ;
IF (EXPECTED_LOGGER <> ACTUAL_LOGGER) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LOGGER_ID ' || EXPECTED_LOGGER || ' - ' || ACTUAL_LOGGER);
END IF;
IF (EXPECTED_PARENT <> ACTUAL_PARENT) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different PARENT_ID ' || EXPECTED_PARENT || ' - ' || ACTUAL_PARENT);
END IF;
IF (EXPECTED_LEVEL <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LEVEL_ID ' || EXPECTED_LEVEL || ' - ' || ACTUAL_LEVEL);
END IF;
COMMIT;

-- Test15: Inserts a logger with an inexistent negative parent.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test15: Inserts a logger with an inexistent negative parent');
SET ACTUAL_PARENT = PREVIOUS VALUE FOR LOGDATA.LOGGER_ID_SEQ + 5;
SET ACTUAL_LEVEL = 3; -- Default level
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test15', ACTUAL_PARENT, ACTUAL_LEVEL);
IF (RAISED_530 = FALSE) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Exception not raised');
ELSE
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (5, 'Exception raised 23503');
END IF;
SET RAISED_530 = FALSE;
COMMIT;

-- Test16: Inserts a normal logger with a diff parent.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test16: Inserts a normal logger with a diff parent');
SET EXPECTED_LOGGER = PREVIOUS VALUE FOR LOGDATA.LOGGER_ID_SEQ + 2;
SET EXPECTED_PARENT = 0;
SET EXPECTED_LEVEL = 3; -- Default level
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test16a', EXPECTED_PARENT, EXPECTED_LEVEL);
SELECT LOGGER_ID, PARENT_ID, LEVEL_ID INTO ACTUAL_LOGGER, ACTUAL_PARENT, ACTUAL_LEVEL
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE LOGGER_ID = PREVIOUS VALUE FOR LOGDATA.LOGGER_ID_SEQ;
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test16b', ACTUAL_PARENT, EXPECTED_LEVEL);
SELECT LOGGER_ID, PARENT_ID, LEVEL_ID INTO ACTUAL_LOGGER, ACTUAL_PARENT, ACTUAL_LEVEL
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE LOGGER_ID = PREVIOUS VALUE FOR LOGDATA.LOGGER_ID_SEQ;
IF (EXPECTED_LOGGER <> ACTUAL_LOGGER) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LOGGER_ID ' || EXPECTED_LOGGER || ' - ' || ACTUAL_LOGGER);
END IF;
IF (EXPECTED_PARENT <> ACTUAL_PARENT) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different PARENT_ID ' || EXPECTED_PARENT || ' - ' || ACTUAL_PARENT);
END IF;
IF (EXPECTED_LEVEL <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LEVEL_ID ' || EXPECTED_LEVEL || ' - ' || ACTUAL_LEVEL);
END IF;
COMMIT;

-- Test17: Inserts a logger as ROOT id.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test17: Inserts a logger as ROOT id');
SET ACTUAL_PARENT = NULL;
SET ACTUAL_LEVEL = 3; -- Default level
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, NAME, PARENT_ID, LEVEL_ID) VALUES
  (0, 'test17', ACTUAL_PARENT, ACTUAL_LEVEL);
IF (RAISED_LGBE1 = FALSE) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Exception not raised');
ELSE
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (5, 'Exception raised LG0E1');
END IF;
SET RAISED_LGBE1 = FALSE;
COMMIT;

-- Test18: Updates a normal logger.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test18: Updates a normal logger');
SET EXPECTED_LOGGER = PREVIOUS VALUE FOR LOGDATA.LOGGER_ID_SEQ + 1;
SET EXPECTED_PARENT = 0;
SET EXPECTED_LEVEL = 3; -- Default level
SET ACTUAL_LEVEL = 10;
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test18', EXPECTED_PARENT, EXPECTED_LEVEL);
UPDATE LOGDATA.CONF_LOGGERS_EFFECTIVE
  SET LEVEL_ID = ACTUAL_LEVEL
  WHERE LOGGER_ID = PREVIOUS VALUE FOR LOGDATA.LOGGER_ID_SEQ;
SELECT LOGGER_ID, PARENT_ID, LEVEL_ID INTO ACTUAL_LOGGER, ACTUAL_PARENT, ACTUAL_LEVEL
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE LOGGER_ID = PREVIOUS VALUE FOR LOGDATA.LOGGER_ID_SEQ;
IF (EXPECTED_LOGGER <> ACTUAL_LOGGER) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LOGGER_ID ' || EXPECTED_LOGGER || ' - ' || ACTUAL_LOGGER);
END IF;
IF (EXPECTED_PARENT <> ACTUAL_PARENT) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different PARENT_ID ' || EXPECTED_PARENT || ' - ' || ACTUAL_PARENT);
END IF;
IF (EXPECTED_LEVEL <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LEVEL_ID ' || EXPECTED_LEVEL || ' - ' || ACTUAL_LEVEL);
END IF;
COMMIT;

-- Test19: Updates a logger with a given id.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test19: Updates a logger with a given id');
SET ACTUAL_PARENT = 0;
SET ACTUAL_LEVEL = 0;
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test19', ACTUAL_PARENT, ACTUAL_LEVEL);
UPDATE LOGDATA.CONF_LOGGERS_EFFECTIVE
  SET LOGGER_ID = PREVIOUS VALUE FOR LOGDATA.LOGGER_ID_SEQ + 1
  WHERE LOGGER_ID = PREVIOUS VALUE FOR LOGDATA.LOGGER_ID_SEQ;
IF (RAISED_LG0E2 = FALSE) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Exception not raised');
ELSE
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (5, 'Exception raised LG0E2');
END IF;
SET RAISED_LG0E2 = FALSE;
COMMIT;

-- Test20: Updates a logger with a null id.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test20: Updates a logger with a null id');
SET ACTUAL_PARENT = 0;
SET ACTUAL_LEVEL = 0;
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test20', ACTUAL_PARENT, ACTUAL_LEVEL);
UPDATE LOGDATA.CONF_LOGGERS_EFFECTIVE
  SET LOGGER_ID = NULL
  WHERE LOGGER_ID = PREVIOUS VALUE FOR LOGDATA.LOGGER_ID_SEQ;
IF (RAISED_LG0E2 = FALSE) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Exception not raised');
ELSE
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (5, 'Exception raised LG0E2');
END IF;
SET RAISED_LG0E2 = FALSE;
COMMIT;

-- Test21: Updates a logger with a negative id.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test21: Updates a logger with a negative id');
SET ACTUAL_PARENT = 0;
SET ACTUAL_LEVEL = 0;
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test21', ACTUAL_PARENT, ACTUAL_LEVEL);
UPDATE LOGDATA.CONF_LOGGERS_EFFECTIVE
  SET LOGGER_ID = -1
  WHERE LOGGER_ID = PREVIOUS VALUE FOR LOGDATA.LOGGER_ID_SEQ;
IF (RAISED_LG0E2 = FALSE) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Exception not raised');
ELSE
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (5, 'Exception raised LG0E2');
END IF;
SET RAISED_LG0E2 = FALSE;
COMMIT;

-- Test22: Updates a logger with an inexistent parent.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test22: Updates a logger with an inexistent parent');
SET ACTUAL_PARENT = 0;
SET ACTUAL_LEVEL = 0;
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test22', ACTUAL_PARENT, ACTUAL_LEVEL);
UPDATE LOGDATA.CONF_LOGGERS_EFFECTIVE
  SET PARENT_ID = PREVIOUS VALUE FOR LOGDATA.LOGGER_ID_SEQ + 1
  WHERE LOGGER_ID = PREVIOUS VALUE FOR LOGDATA.LOGGER_ID_SEQ;
IF (RAISED_LG0E2 = FALSE) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Exception not raised');
ELSE
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (5, 'Exception raised LG0E2');
END IF;
SET RAISED_LG0E2 = FALSE;
COMMIT;

-- Test23: Updates a logger with an null parent.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test23: Updates a logger with an null parent');
SET ACTUAL_PARENT = 0;
SET ACTUAL_LEVEL = 0;
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test23', ACTUAL_PARENT, ACTUAL_LEVEL);
UPDATE LOGDATA.CONF_LOGGERS_EFFECTIVE
  SET PARENT_ID = NULL
  WHERE LOGGER_ID = PREVIOUS VALUE FOR LOGDATA.LOGGER_ID_SEQ;
IF (RAISED_LGAE1 = FALSE) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Exception not raised');
ELSE
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (5, 'Exception raised LG0E1');
END IF;
SET RAISED_LGAE1 = FALSE;
COMMIT;

-- Test24: Updates a logger with an null level.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test24: Updates a logger with an null level');
SET ACTUAL_PARENT = 0;
SET ACTUAL_LEVEL = 0;
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test24', ACTUAL_PARENT, ACTUAL_LEVEL);
UPDATE LOGDATA.CONF_LOGGERS_EFFECTIVE
  SET LEVEL_ID = NULL
  WHERE LOGGER_ID = PREVIOUS VALUE FOR LOGDATA.LOGGER_ID_SEQ;
IF (RAISED_LGAE3 = FALSE) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Exception not raised');
ELSE
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (5, 'Exception raised LG0E3');
END IF;
SET RAISED_LGAE3 = FALSE;
COMMIT;

-- Test25: Updates a logger with an inexistent level.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test25: Updates a logger with an inexistent level');
SET EXPECTED_LOGGER = PREVIOUS VALUE FOR LOGDATA.LOGGER_ID_SEQ + 1;
SET EXPECTED_PARENT = 0;
SET EXPECTED_LEVEL = 3; -- Default level
SET ACTUAL_PARENT = 0;
SET ACTUAL_LEVEL = 3;
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test25', ACTUAL_PARENT, 0);
UPDATE LOGDATA.CONF_LOGGERS_EFFECTIVE
  SET LEVEL_ID = -1
  WHERE LOGGER_ID = PREVIOUS VALUE FOR LOGDATA.LOGGER_ID_SEQ;
SELECT LOGGER_ID, PARENT_ID, LEVEL_ID INTO ACTUAL_LOGGER, ACTUAL_PARENT, ACTUAL_LEVEL
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE LOGGER_ID = PREVIOUS VALUE FOR LOGDATA.LOGGER_ID_SEQ;
IF (EXPECTED_LOGGER <> ACTUAL_LOGGER) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LOGGER_ID ' || EXPECTED_LOGGER || ' - ' || ACTUAL_LOGGER);
END IF;
IF (EXPECTED_PARENT <> ACTUAL_PARENT) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different PARENT_ID ' || EXPECTED_PARENT || ' - ' || ACTUAL_PARENT);
END IF;
IF (EXPECTED_LEVEL <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LEVEL_ID ' || EXPECTED_LEVEL || ' - ' || ACTUAL_LEVEL);
END IF;
COMMIT;

-- Test26: Updates root logger when it is the only existing.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test26: Updates root logger when it is the only existing');
SET ACTUAL_PARENT = 0;
SET ACTUAL_LEVEL = 3;
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test26', ACTUAL_PARENT, ACTUAL_LEVEL);
DELETE FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONF_LOGGERS_EFFECTIVE
  SET LOGGER_ID = 1
  WHERE LOGGER_ID = 0;
IF (RAISED_LGAE1 = FALSE) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Exception not raised');
ELSE
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (5, 'Exception raised LG0E1');
END IF;
SET RAISED_LGAE1 = FALSE;
COMMIT;

-- Test27: Updates a logger to same id.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test27: Updates a logger to same id');
SET ACTUAL_PARENT = 0;
SET ACTUAL_LEVEL = 0;
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test27', ACTUAL_PARENT, ACTUAL_LEVEL);
UPDATE LOGDATA.CONF_LOGGERS_EFFECTIVE
  SET LOGGER_ID = PREVIOUS VALUE FOR LOGDATA.LOGGER_ID_SEQ
  WHERE LOGGER_ID = PREVIOUS VALUE FOR LOGDATA.LOGGER_ID_SEQ;
IF (RAISED_LG0E2 = FALSE) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Exception not raised');
ELSE
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (5, 'Exception raised LG0E2');
END IF;
SET RAISED_LG0E2 = FALSE;
COMMIT;

-- Test28: Updates a logger to ROOT.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test28: Updates a logger to ROOT');
SET ACTUAL_PARENT = 0;
SET ACTUAL_LEVEL = 0;
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test28', ACTUAL_PARENT, ACTUAL_LEVEL);
UPDATE LOGDATA.CONF_LOGGERS_EFFECTIVE
  SET LOGGER_ID = 0
  WHERE LOGGER_ID = PREVIOUS VALUE FOR LOGDATA.LOGGER_ID_SEQ;
IF (RAISED_LG0E2 = FALSE) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Exception not raised');
ELSE
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (5, 'Exception raised LG0E2');
END IF;
SET RAISED_LG0E2 = FALSE;
COMMIT;

-- Test29: Updates a logger to existant id.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test29: Updates a logger to existant id');
SET ACTUAL_PARENT = 0;
SET ACTUAL_LEVEL = 0;
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test29a', ACTUAL_PARENT, ACTUAL_LEVEL);
SELECT LOGGER_ID, PARENT_ID, LEVEL_ID INTO ACTUAL_LOGGER, ACTUAL_PARENT, ACTUAL_LEVEL
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE LOGGER_ID = PREVIOUS VALUE FOR LOGDATA.LOGGER_ID_SEQ;
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test29b', ACTUAL_PARENT, ACTUAL_LEVEL);
UPDATE LOGDATA.CONF_LOGGERS_EFFECTIVE
  SET LOGGER_ID = ACTUAL_LOGGER
  WHERE LOGGER_ID = PREVIOUS VALUE FOR LOGDATA.LOGGER_ID_SEQ;
IF (RAISED_LG0E2 = FALSE) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Exception not raised');
ELSE
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (5, 'Exception raised LG0E2');
END IF;
SET RAISED_LG0E2 = FALSE;
COMMIT;

-- Test30: Updates a logger with null message.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test30: Updates a logger with null message');
SET ACTUAL_PARENT = 0;
SET ACTUAL_LEVEL = 0;
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test30', ACTUAL_PARENT, ACTUAL_LEVEL);
UPDATE LOGDATA.CONF_LOGGERS_EFFECTIVE
  SET NAME = NULL
  WHERE LOGGER_ID = PREVIOUS VALUE FOR LOGDATA.LOGGER_ID_SEQ;
IF (RAISED_LG0E2 = FALSE) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Exception not raised');
ELSE
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (5, 'Exception raised LG0E2');
END IF;
SET RAISED_LG0E2 = FALSE;
COMMIT;

-- Test31: Updates a logger same parent.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test31: Updates a logger same parent');
SET ACTUAL_PARENT = 0;
SET ACTUAL_LEVEL = 0;
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test31', ACTUAL_PARENT, ACTUAL_LEVEL);
UPDATE LOGDATA.CONF_LOGGERS_EFFECTIVE
  SET PARENT_ID = ACTUAL_PARENT
  WHERE LOGGER_ID = PREVIOUS VALUE FOR LOGDATA.LOGGER_ID_SEQ;
IF (RAISED_LG0E2 = FALSE) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Exception not raised');
ELSE
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (5, 'Exception raised LG0E2');
END IF;
SET RAISED_LG0E2 = FALSE;
COMMIT;

-- Test32: Updates a logger with negative level.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test32: Updates a logger with negative level');
SET EXPECTED_LOGGER = PREVIOUS VALUE FOR LOGDATA.LOGGER_ID_SEQ + 1;
SET EXPECTED_PARENT = 0;
SET EXPECTED_LEVEL = 3; -- Default level
SET ACTUAL_PARENT = 0;
SET ACTUAL_LEVEL = 3;
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test32', ACTUAL_PARENT, ACTUAL_LEVEL);
UPDATE LOGDATA.CONF_LOGGERS_EFFECTIVE
  SET LEVEL_ID = -1
  WHERE LOGGER_ID = PREVIOUS VALUE FOR LOGDATA.LOGGER_ID_SEQ;
SELECT LOGGER_ID, PARENT_ID, LEVEL_ID INTO ACTUAL_LOGGER, ACTUAL_PARENT, ACTUAL_LEVEL
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE LOGGER_ID = PREVIOUS VALUE FOR LOGDATA.LOGGER_ID_SEQ;
IF (EXPECTED_LOGGER <> ACTUAL_LOGGER) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LOGGER_ID ' || EXPECTED_LOGGER || ' - ' || ACTUAL_LOGGER);
END IF;
IF (EXPECTED_PARENT <> ACTUAL_PARENT) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different PARENT_ID ' || EXPECTED_PARENT || ' - ' || ACTUAL_PARENT);
END IF;
IF (EXPECTED_LEVEL <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LEVEL_ID ' || EXPECTED_LEVEL || ' - ' || ACTUAL_LEVEL);
END IF;
COMMIT;

-- Test33: Deletes a normal level.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test33: Deletes a normal level');
SET ACTUAL_PARENT = 0;
SET ACTUAL_LEVEL = 3;
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test33', ACTUAL_PARENT, ACTUAL_LEVEL);
DELETE FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE LOGGER_ID = PREVIOUS VALUE FOR LOGDATA.LOGGER_ID_SEQ;
COMMIT;

-- Test34: Tries to delete root logger.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test34: Tries to delete root logger');
DELETE FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE LOGGER_ID = 0;
IF (RAISED_LG0E4 = FALSE) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Exception not raised');
ELSE
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (5, 'Exception raised LG0E4');
END IF;
SET RAISED_LG0E4 = FALSE;
COMMIT;

-- Test35: Delete all loggers except root.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test35: Delete all loggers except root');
SET ACTUAL_PARENT = 0;
SET ACTUAL_LEVEL = 3;
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test35', ACTUAL_PARENT, ACTUAL_LEVEL);
DELETE FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE LOGGER_ID <> 0;
COMMIT;

-- Test36: Tries to delete all loggers.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test36: Tries to delete all loggers');
SET ACTUAL_PARENT = 0;
SET ACTUAL_LEVEL = 3;
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test36', ACTUAL_PARENT, ACTUAL_LEVEL);
DELETE FROM LOGDATA.CONF_LOGGERS_EFFECTIVE;
IF (RAISED_LG0E4 = FALSE) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Exception not raised');
ELSE
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (5, 'Exception raised LG0E4');
END IF;
SET RAISED_LG0E4 = FALSE;
COMMIT;

-- Test37: Deletes a parent with son.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test37: Deletes a parent with son');
SET ACTUAL_PARENT = 0;
SET ACTUAL_LEVEL = 3;
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test37a', ACTUAL_PARENT, ACTUAL_LEVEL);
SELECT LOGGER_ID INTO ACTUAL_LOGGER
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE LOGGER_ID = PREVIOUS VALUE FOR LOGDATA.LOGGER_ID_SEQ;
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test37b', ACTUAL_LOGGER, ACTUAL_LEVEL);
-- TODO DELETE FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
--  WHERE LOGGER_ID = ACTUAL_LOGGER;
COMMIT;

-- Test38: Updates a normal logger changing the default value.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test38: Updates a normal logger changing the default value');
SET EXPECTED_LOGGER = PREVIOUS VALUE FOR LOGDATA.LOGGER_ID_SEQ + 1;
SET EXPECTED_PARENT = 0;
SET EXPECTED_LEVEL = 5;
SET ACTUAL_LEVEL = 10;
DELETE FROM LOGDATA.CONF_LOGGERS;
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test38', EXPECTED_PARENT, EXPECTED_LEVEL);
UPDATE LOGDATA.CONFIGURATION
  SET VALUE = 'DEBUG'
  WHERE KEY = 'defaultRootLevel';
UPDATE LOGDATA.CONF_LOGGERS_EFFECTIVE
  SET LEVEL_ID = ACTUAL_LEVEL
  WHERE LOGGER_ID = PREVIOUS VALUE FOR LOGDATA.LOGGER_ID_SEQ;
UPDATE LOGDATA.CONFIGURATION
  SET VALUE = 'WARN'
  WHERE KEY = 'defaultRootLevel';
SELECT LOGGER_ID, PARENT_ID, LEVEL_ID INTO ACTUAL_LOGGER, ACTUAL_PARENT, ACTUAL_LEVEL
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE LOGGER_ID = PREVIOUS VALUE FOR LOGDATA.LOGGER_ID_SEQ;
IF (EXPECTED_LOGGER <> ACTUAL_LOGGER) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LOGGER_ID ' || EXPECTED_LOGGER || ' - ' || ACTUAL_LOGGER);
END IF;
IF (EXPECTED_PARENT <> ACTUAL_PARENT) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different PARENT_ID ' || EXPECTED_PARENT || ' - ' || ACTUAL_PARENT);
END IF;
IF (EXPECTED_LEVEL <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LEVEL_ID ' || EXPECTED_LEVEL || ' - ' || ACTUAL_LEVEL);
END IF;
COMMIT;

-- Test39: Update the level of ROOT logger, value from conf.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test39: Update the level of ROOT logger, value from conf');
SET EXPECTED_LOGGER = 0;
SET EXPECTED_PARENT = NULL;
SET EXPECTED_LEVEL = 2;
DELETE FROM LOGDATA.CONF_LOGGERS;
INSERT INTO LOGDATA.CONF_LOGGERS (LOGGER_ID, NAME, PARENT_ID, LEVEL_ID)
  VALUES (EXPECTED_LOGGER, 'ROOT', EXPECTED_PARENT, EXPECTED_LEVEL);
UPDATE LOGDATA.CONF_LOGGERS_EFFECTIVE
  SET LEVEL_ID = EXPECTED_LEVEL
  WHERE LOGGER_ID = EXPECTED_LOGGER;
SELECT LOGGER_ID, PARENT_ID, LEVEL_ID INTO ACTUAL_LOGGER, ACTUAL_PARENT, ACTUAL_LEVEL
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE LOGGER_ID = 0;
IF (EXPECTED_LOGGER <> ACTUAL_LOGGER) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LOGGER_ID ' || EXPECTED_LOGGER || ' - ' || ACTUAL_LOGGER);
END IF;
IF (EXPECTED_PARENT <> ACTUAL_PARENT) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different PARENT_ID ' || EXPECTED_PARENT || ' - ' || ACTUAL_PARENT);
END IF;
IF (EXPECTED_LEVEL <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LEVEL_ID ' || EXPECTED_LEVEL || ' - ' || ACTUAL_LEVEL);
END IF;
COMMIT;

-- Test40: Update the level of ROOT logger when conf is empty, takes default.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test40: Update the level of ROOT logger when conf is empty, takes default');
SET EXPECTED_LOGGER = 0;
SET EXPECTED_PARENT = NULL;
SET EXPECTED_LEVEL = 4;
UPDATE LOGDATA.CONFIGURATION
  SET VALUE = 'INFO'
  WHERE KEY = 'defaultRootLevel';
DELETE FROM LOGDATA.CONF_LOGGERS;
IF (SQLSTATE = '02000' OR SQLSTATE = '00000') THEN
 UPDATE LOGDATA.CONF_LOGGERS_EFFECTIVE
   SET LEVEL_ID = EXPECTED_LEVEL
   WHERE LOGGER_ID = EXPECTED_LOGGER;
 SELECT LOGGER_ID, PARENT_ID, LEVEL_ID INTO ACTUAL_LOGGER, ACTUAL_PARENT, ACTUAL_LEVEL
   FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
   WHERE LOGGER_ID = 0;
 IF (EXPECTED_LOGGER <> ACTUAL_LOGGER) THEN
  INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LOGGER_ID ' || EXPECTED_LOGGER || ' - ' || ACTUAL_LOGGER);
 END IF;
 IF (EXPECTED_PARENT <> ACTUAL_PARENT) THEN
  INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different PARENT_ID ' || EXPECTED_PARENT || ' - ' || ACTUAL_PARENT);
 END IF;
 IF (EXPECTED_LEVEL <> ACTUAL_LEVEL) THEN
  INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LEVEL_ID ' || EXPECTED_LEVEL || ' - ' || ACTUAL_LEVEL);
 END IF;
ELSE
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Configuration was not deleted completely - ' || SQLSTATE);
END IF;
COMMIT;

-- Cleans the environment.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'TestsConfLoggersEffective: Cleaning environment');
UPDATE LOGDATA.CONFIGURATION
  SET VALUE = 'true'
  WHERE KEY = 'internalCache';
UPDATE LOGDATA.CONFIGURATION
  SET VALUE = 'WARN'
  WHERE KEY = 'defaultRootLevel';
UPDATE LOGDATA.CONFIGURATION
  SET VALUE = 'false'
  WHERE KEY = 'logInternals';
DELETE FROM LOGDATA.CONF_LOGGERS;
DELETE FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE LOGGER_ID <> 0;
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'TestsConfLoggersEffective: Finished succesfully');
COMMIT;

END @

SELECT *
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  ORDER BY LOGGER_ID @