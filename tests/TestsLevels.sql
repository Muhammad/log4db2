--#SET TERMINATOR @

/**
 * Tests for the logger insertions.
 */

SET CURRENT SCHEMA LOGGER_1A @

BEGIN
-- Reserved names for errors.
DECLARE SQLCODE INTEGER DEFAULT 0;
DECLARE SQLSTATE CHAR(5) DEFAULT '0000';

DECLARE RAISED_407 BOOLEAN DEFAULT FALSE; -- Null value.
DECLARE RAISED_803 BOOLEAN DEFAULT FALSE; -- Duplicated key.
DECLARE ACTUAL_LEVEL_ID ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;
DECLARE ACTUAL_NAME ANCHOR DATA TYPE TO LOGDATA.LEVELS.NAME;
DECLARE EXPECTED_LEVEL_ID ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;
DECLARE EXPECTED_NAME ANCHOR DATA TYPE TO LOGDATA.LEVELS.NAME;
DECLARE MAXI SMALLINT;
DECLARE INDEX SMALLINT;

-- Controlled SQL State.
DECLARE CONTINUE HANDLER FOR SQLSTATE '23502'
  BEGIN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (5, 'SQLState ' || SQLSTATE);
   SET RAISED_407 = TRUE;
  END;
DECLARE CONTINUE HANDLER FOR SQLSTATE '23505'
  BEGIN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (5, 'SQLState ' || SQLSTATE);
   SET RAISED_803 = TRUE;
  END;

-- For any other SQL State.
DECLARE CONTINUE HANDLER FOR SQLWARNING
  INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (4, 'Warning SQLCode ' || SQLCODE || '-SQLState ' || SQLSTATE);
DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
  INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (4, 'Exception SQLCode ' || SQLCODE || '-SQLState ' || SQLSTATE);
DECLARE CONTINUE HANDLER FOR NOT FOUND
  INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (5, 'Not found SQLCode ' || SQLCODE || '-SQLState ' || SQLSTATE);

-- Prepares the environment.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (4, 'TestsLevels: Preparing environment');
DELETE FROM LOGDATA.CONF_LOGGERS;
INSERT INTO LOGDATA.CONF_LOGGERS
  VALUES (0, 'ROOT', NULL, 0);
SET MAXI = (SELECT MAX(LEVEL_ID)
  FROM LOGDATA.LEVELS);
SET INDEX = 1;
WHILE (INDEX < MAXI) DO
 DELETE FROM LOGDATA.LEVELS
   WHERE LEVEL_ID = MAXI - INDEX;
 COMMIT;
 SET INDEX = INDEX + 1;
END WHILE;
COMMIT;

-- Test1: Inserts a new level.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test1: Inserts a new level');
SET EXPECTED_LEVEL_ID = 1;
SET EXPECTED_NAME = 'ON';

DELETE FROM LOGDATA.LEVELS
  WHERE LEVEL_ID <> 0;
INSERT INTO LOGDATA.LEVELS (LEVEL_ID, NAME) VALUES (EXPECTED_LEVEL_ID, EXPECTED_NAME);
SELECT LEVEL_ID, NAME INTO EXPECTED_LEVEL_ID, EXPECTED_NAME
  FROM LOGDATA.LEVELS
  WHERE LEVEL_ID <> 0;
IF (EXPECTED_LEVEL_ID <> ACTUAL_LEVEL_ID) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LEVEL_ID ' || EXPECTED_LEVEL_ID || ' - ' || ACTUAL_LEVEL_ID);
END IF;
IF (EXPECTED_NAME <> ACTUAL_NAME) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different NAME ' || EXPECTED_NAME || ' - ' || ACTUAL_NAME);
END IF;

-- Test1: Inserts a new level.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test1: Inserts a new level');
SET EXPECTED_LEVEL_ID = 1;
SET EXPECTED_NAME = 'ON';
DELETE FROM LOGDATA.LEVELS
  WHERE LEVEL_ID <> 0;
INSERT INTO LOGDATA.LEVELS (LEVEL_ID, NAME) VALUES (EXPECTED_LEVEL_ID, EXPECTED_NAME);
SELECT LEVEL_ID, NAME INTO EXPECTED_LEVEL_ID, EXPECTED_NAME
  FROM LOGDATA.LEVELS
  WHERE LEVEL_ID <> 0;
IF (EXPECTED_LEVEL_ID <> ACTUAL_LEVEL_ID) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LEVEL_ID ' || EXPECTED_LEVEL_ID || ' - ' || ACTUAL_LEVEL_ID);
END IF;
IF (EXPECTED_NAME <> ACTUAL_NAME) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different NAME ' || EXPECTED_NAME || ' - ' || ACTUAL_NAME);
END IF;
COMMIT;

-- Test2: Inserts a new level with null name.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test2: Inserts a new level with null name');
SET EXPECTED_LEVEL_ID = 1;
SET EXPECTED_NAME = NULL;
DELETE FROM LOGDATA.LEVELS
  WHERE LEVEL_ID <> 0;
INSERT INTO LOGDATA.LEVELS (LEVEL_ID, NAME) VALUES (EXPECTED_LEVEL_ID, EXPECTED_NAME);
-- TODO
COMMIT;

-- Test3: Inserts a new level with null id.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test3: Inserts a new level with null id');
SET EXPECTED_LEVEL_ID = NULL;
SET EXPECTED_NAME = 'ON';
DELETE FROM LOGDATA.LEVELS
  WHERE LEVEL_ID <> 0;
INSERT INTO LOGDATA.LEVELS (LEVEL_ID, NAME) VALUES (EXPECTED_LEVEL_ID, EXPECTED_NAME);
-- TODO
COMMIT;

-- Test4: Inserts a new level with negative id.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test4: Inserts a new level with negative id');
SET EXPECTED_LEVEL_ID = -1;
SET EXPECTED_NAME = 'test4';
DELETE FROM LOGDATA.LEVELS
  WHERE LEVEL_ID <> 0;
INSERT INTO LOGDATA.LEVELS (LEVEL_ID, NAME) VALUES (EXPECTED_LEVEL_ID, EXPECTED_NAME);
-- TODO
COMMIT;

-- Test5: Inserts a new level with duplicated 0.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test5: Inserts a new level with duplicated 0');
SET EXPECTED_LEVEL_ID = 0;
SET EXPECTED_NAME = 'test5';
DELETE FROM LOGDATA.LEVELS
  WHERE LEVEL_ID <> 0;
INSERT INTO LOGDATA.LEVELS (LEVEL_ID, NAME) VALUES (EXPECTED_LEVEL_ID, EXPECTED_NAME);
-- TODO
COMMIT;

-- Test6: Inserts a new level with duplicated id.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test6: Inserts a new level with duplicated id');
SET EXPECTED_LEVEL_ID = 1;
SET EXPECTED_NAME = 'test6';
DELETE FROM LOGDATA.LEVELS
  WHERE LEVEL_ID <> 0;
INSERT INTO LOGDATA.LEVELS (LEVEL_ID, NAME) VALUES (EXPECTED_LEVEL_ID, EXPECTED_NAME);
INSERT INTO LOGDATA.LEVELS (LEVEL_ID, NAME) VALUES (EXPECTED_LEVEL_ID, EXPECTED_NAME);
IF (RAISED_803 = FALSE) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Exception not raised');
ELSE
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (5, 'Exception raised 23505');
END IF;
SET RAISED_803= FALSE;
COMMIT;

-- TODO UPDATE

-- TODO DELETE

-- Cleans the environment.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'TestsLevels: Cleaning environment');
DELETE FROM LOGDATA.LEVELS
  WHERE LEVEL_ID <> 0;
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'TestsLevels: Finished succesfully');
COMMIT;

END @

SELECT *
  FROM LOGDATA.LEVELS @